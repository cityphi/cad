function [ solved, totalError ] = forceSolver( forces, reactions )
%FORCESOLVER is a tool to find reaction forces with known input forces
%   sovled = forceSolver( forces, unknown) reaction forces
%   Forces is [ locX locY locZ Fx Fy Fz Mx My Mz ] 
%   Unkown Forces is same format but the forces and moments correspond to
%   their ability to resist
%   Solved is [ locX locY locZ Fx Fy Fz Mx My Mz ] 

% setting up useful values used
numReactions = size(reactions, 1);
numForces    = 6; % constant for the number of forces (Fxyz and Mxyz)
offset       = 3; % number of coordinates (xyz) used to offset matrices

% intermediate array that holds the information for the 6 equations
solver = equationBuilder(reactions, forces, 1);

% simplify the solver array and try to solve it
zeroForces = all(solver == 0);
removedSolver = solver(:, ~zeroForces);
reducedSolver = rref(removedSolver);

% check if the matrix could solve
unsolveable = 0;
for i = 1:numForces
    if sum(reducedSolver(i, 1:end-1) ~= 0) > 1
        unsolveable = 1;
    end
end

% if the program solved - convert from rref format to output format
solved = zeros(numReactions, 9); % output
k = 1;
if unsolveable ~= 1
    % set the forces
    for i = 1:numReactions
        for j = 1:numForces
            if zeroForces((i-1)*numForces + j) == 0
                solved(i, j+offset) = reducedSolver(k, end);
                k = k + 1;
            end
        end
    end
    
    % set the locations
    for i = 1:numReactions
        solved(i, 1:3) = reactions(i, 1:3);
    end 
    
else
    disp('--The matrix could not be solved')
end

%--check
check = equationBuilder(solved, forces, 0);
errors = sum(check(:, 1:end-1), 2) - check(:, end);
percentOff = round(abs(sum(errors)/sum(check(:, end)))*100, 2);
totalError = [transp(errors) percentOff];
end

function [ sysEquations ] = equationBuilder(reactions, forces, related)
%EQUATIONBUILDER Makes a system of euqations
%   Takes the reactions and forces of the system to make the system of
%   equations of the system. Takes a related bool for cases where
%   information about forces that are the same are being passed in
%   reactions array

% constants used in main to make it easier to understand
numReactions = size(reactions, 1);
numForces    = 6;
relations    = max(max(reactions(:, 4:9)));

% random 3D point to take the moments about
about = reactions(1, 1:3);

forces(:, 1:3) = bsxfun(@minus, forces(:, 1:3), -about(1:3));
totalR = transp(forces(:, 1:3));
totalF = transp(forces(:, 4:6));
totalM = [transp(forces(:, 7:9)) cross(totalR, totalF)];

%  output array that holds the information for the 6 equations
sysEquations = zeros(6, numReactions * numForces + 1);

% ---totals
sysEquations(1, end) = -sum(totalF(1, :));
sysEquations(2, end) = -sum(totalF(2, :));
sysEquations(3, end) = -sum(totalF(3, :));

sysEquations(4, end) = -sum(totalM(1, :));
sysEquations(5, end) = -sum(totalM(2, :));
sysEquations(6, end) = -sum(totalM(3, :));

% ---add related forces equations 
extraEquations = zeros(numReactions * numForces + 1);
line = 1;
if related && relations > 1
    for n = 2:relations
        [i, j] = find(reactions(:, 4:9) == n);
        count = size(i, 1);
        loop = 0;
        % allows the solver to still work if non-pairs are input
        if count == 1;
            reactions(i, j + 3) = 1;
        else
            % loop for number of same variables
            for m = 1:count
                reactions(i(m), j(m) + 3) = 1; % change reactions
                loop = loop + 1;
                % add a 1 and -1 pair to the equations
                if loop == 1
                    extraEquations(line, (i(m)-1)*6+j(m)) = 1;
                elseif loop == 2
                    extraEquations(line, (i(m)-1)*6+j(m)) = -1;
                    line = line + 1;
                else
                    extraEquations(line,(i(m)-1)*6+j(m)) = -1;
                    extraEquations(line,(i(m-1)-1)*6+j(m-1)) = 1;
                    line = line + 1;
                end
            end
        end    
    end
end

% remove the unused lines and add to the system of equations
extraEquations( ~any(extraEquations,2), : ) = [];
sysEquations = [sysEquations; extraEquations];

% ---reaction forces
for i = 1:numReactions
    n = (i-1)*numForces; 
    % input the simple values (forces and moments)
    sysEquations(1, n+1) = reactions(i, 4);
    sysEquations(2, n+2) = reactions(i, 5);
    sysEquations(3, n+3) = reactions(i, 6);
    sysEquations(4, n+4) = reactions(i, 7);
    sysEquations(5, n+5) = reactions(i, 8);
    sysEquations(6, n+6) = reactions(i, 9);
    
    % find the moments generated by the reaction forces
    sysEquations(4, n+3) = -(reactions(i, 2) - about(2)) * reactions(i, 6);
    sysEquations(4, n+2) = -(reactions(i, 3) - about(3)) * reactions(i, 5);
    sysEquations(5, n+3) = -(reactions(i, 1) - about(1)) * reactions(i, 6);
    sysEquations(5, n+1) = -(reactions(i, 3) - about(3)) * reactions(i, 4);
    sysEquations(6, n+2) = -(reactions(i, 1) - about(1)) * reactions(i, 5);
    sysEquations(6, n+1) = -(reactions(i, 2) - about(2)) * reactions(i, 4);
end
end