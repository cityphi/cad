function [ solved ] = forceSolver( forces, unknown )
%FORCESOLVER is a tool to find reaction forces with known input forces
%   sovled = forceSolver( forces, unknown) reaction forces
%   Forces is [ locX locY locZ Fx Fy Fz Mx My Mz ] 
%   Unkown Forces is same format but the forces and moments correspond to
%   their ability to resist
%   Output is the same format as Forces

numReactions = size(unknown, 1);

% setup the output
solved = zeros(numReactions, 9);

% setup the intermediate array that solves the reaction forces
% rows are the sum of forces in x, y, z; then moments in x, y, z
% columns are all the reaction forces (even if they aren't possible)
% last column is the total for that sum
solver = zeros(6, numReactions *6 + 1);

% summation of forces (x, y, z)
solver(1,end) = -sum(forces(:, 4));
solver(2,end) = -sum(forces(:, 5));
solver(3,end) = -sum(forces(:, 6));

% input the simple values (forces and moments)
% does not do the moments created by reaciton forces
for i = 1:numReactions
    solver(1, (i-1)*6+1) = unknown(i, 4);
    solver(2, (i-1)*6+2) = unknown(i, 5);
    solver(3, (i-1)*6+3) = unknown(i, 6);
    solver(4, (i-1)*6+4) = unknown(i, 7);
    solver(5, (i-1)*6+5) = unknown(i, 8);
    solver(6, (i-1)*6+6) = unknown(i, 9); 
end


% pick a random point to take the moments about
about = transpose(rand(3, 1));

% find the moment generated by the input forces
solver(4,end) = -(dot(forces(:, 2) - about(2), forces(:, 6)) + ...
                dot(forces(:, 3) - about(3), forces(:, 5)) + ...
                sum(forces(:, 7)));
solver(5,end) = -(dot(forces(:, 1) - about(1), forces(:, 6)) + ...
                dot(forces(:, 3) - about(3), forces(:, 4)) + ...
                sum(forces(:, 8)));
solver(6,end) = -(dot(forces(:, 1) - about(1), forces(:, 5)) + ...
                dot(forces(:, 2) - about(2), forces(:, 4)) + ...
                sum(forces(:, 9)));

% find the moments generated by the reaction forces            
for i = 1:numReactions
    n = (i-1)*6;
    solver(4, n+3) = (unknown(i, 2) - about(2)) * unknown(i, 6);
    solver(4, n+2) = (unknown(i, 3) - about(3)) * unknown(i, 5);
    solver(5, n+3) = (unknown(i, 1) - about(1)) * unknown(i, 6);
    solver(5, n+1) = (unknown(i, 3) - about(3)) * unknown(i, 4);
    solver(6, n+2) = (unknown(i, 1) - about(1)) * unknown(i, 5);
    solver(6, n+1) = (unknown(i, 2) - about(2)) * unknown(i, 4);
end

% simplify the solver array and try to solve it
zeroForces = all(solver == 0);
removedSolver = solver(:, ~zeroForces);
reducedSolver = rref(removedSolver);

% check if the matrix could solve
unsolveable = 0;
for i = 1:6
    if sum(reducedSolver(i, 1:end-1) ~= 0) > 1
        unsolveable = 1;
    end
end

% if the program solved - convert from rref format to output format
% if it didn't leave as 0 array
k = 1;
if unsolveable ~= 1
    for i = 1:numReactions
        for n = 1:6
            if zeroForces((i-1)*6 + n) == 0
                solved(i, n + 3) = reducedSolver( k, end);
                k = k + 1;
            end
        end
    end
    for i = 1:numReactions
        solved(i, 1:3) = unknown(i, 1:3);
    end
else
    disp('--The matrix could not be solved')
end